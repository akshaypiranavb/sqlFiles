--                          BASICS

-- COMMENTS
-- SINGLE LINE COMMENT
/*
MULTILINE COMMENT
*/
-- CREATING A DATABASE
CREATE DATABASE AKSHAYPIRANAV;

-- USING A SPECIFIC DATABASE,THIS INDICATES THE ACTIONS ARE PERFORMED ONLY INTHIS DATABASE
USE AKSHAYPIRANAV;

-- DROPING A  DATABASE (DROP OR SCHEMA)
DROP DATABASE AKSHAYPIRANAV;
DROP SCHEMA AKSHAYPIRANAV;

-- TO DISPLAY HOW MANY AND WHAT TABLES ARE THERE
SHOW TABLES;
--                                CRUD OPERATIONS
-- CREATING A TABLE

CREATE TABLE EMPLOYEE
(
EMP_ID INT PRIMARY KEY AUTO_INCREMENT,
EMP_NAME VARCHAR(20),
EMP_AGE INT,
EMP_SALARY INT,
EMP_JOB_ROLE VARCHAR(30) DEFAULT "NONE",
EMP_BRANCH_ID INT
);

-- DESCRIBING A TABLE (DESCRIBE OR DESC)
DESCRIBE EMPLOYEE;
DESC EMPLOYEE;

-- DROPPING A TABLE
DROP TABLE EMPLOYEE;

-- INSERTING VALUES INTO A TABLE
INSERT INTO EMPLOYEE VALUES(1,"SRI",19,1000000,"CA",1);

-- INSERTING VALUES FOR SPECIFIC VARIABLES
INSERT INTO EMPLOYEE(EMP_NAME,EMP_AGE,EMP_SALARY,EMP_JOB_ROLE,EMP_BRANCH_ID) VALUES("PIRANAV",31,1000000,"DANCER",2);

-- ALTERING A TABLE
ALTER TABLE EMPLOYEE ADD BLOCK_NAME VARCHAR(20);
ALTER TABLE EMPLOYEE ADD COLUMN BLOCK_NAME VARCHAR(20);

ALTER TABLE EMPLOYEE DROP COLUMN BLOCK_NAME;
ALTER TABLE EMPLOYEE DROP BLOCK_NAME;


-- TO VIEW THE TABLE
SELECT * FROM EMPLOYEE;

-- TO VIEW PARTICULAR ITEMS
SELECT EMP_AGE,EMP_NAME,EMP_SALARY FROM EMPLOYEE;

-- UPDATING THE VALUES
UPDATE EMPLOYEE SET EMP_AGE=19 WHERE EMP_AGE =20;

-- DELETING  A ROW AND WITH CONDITION
DELETE FROM EMPLOYEE EMP_AGE;
DELETE FROM EMPLOYEE WHERE EMP_AGE =20;

-- CONDITIONS
SELECT * FROM EMPLOYEE WHERE EMP_SALARY >=100000;
SELECT * FROM EMPLOYEE WHERE EMP_SALARY >100000;
SELECT * FROM EMPLOYEE WHERE EMP_SALARY <=100000;
SELECT * FROM EMPLOYEE WHERE EMP_SALARY <>100000;
SELECT * FROM EMPLOYEE WHERE EMP_SALARY >100000 AND EMP_AGE=19;
SELECT * FROM EMPLOYEE WHERE EMP_SALARY =200000 OR EMP_AGE <=18;
SELECT * FROM EMPLOYEE LIMIT 2;
SELECT * FROM EMPLOYEE WHERE EMP_NAME LIKE "AKSHAY";
SELECT * FROM EMPLOYEE WHERE EMP_SALARY >100000;
SELECT * FROM EMPLOYEE WHERE EMP_SALARY >100000;

SELECT DISTINCT EMP_NAME FROM EMPLOYEE;

SELECT * FROM EMPLOYEE ORDER BY EMP_AGE DESC;
SELECT * FROM EMPLOYEE ORDER BY EMP_AGE ASC;

SELECT * FROM EMPLOYEE WHERE EMP_NAME LIKE "S%";
-- -------------------------------------------------------------------------------------------------------------------------------------------

-- MOST USED AGGREGATE FUNCTIONS
SELECT COUNT(*) FROM EMPLOYEE;
SELECT AVG(EMP_AGE) FROM EMPLOYEE;
SELECT MAX(EMP_NAME) FROM EMPLOYEE;
SELECT MIN(EMP_NAME) FROM EMPLOYEE;
SELECT SUM(EMP_AGE) FROM EMPLOYEE;
SELECT AVG(EMP_AGE) AGE FROM EMPLOYEE ; -- ALLIES NAME
SELECT UCASE(EMP_NAME) EMP_NAME FROM EMPLOYEE ;
SELECT LCASE(EMP_NAME) EMP_NAME FROM EMPLOYEE ;
SELECT EMP_NAME ,CHAR_LENGTH(EMP_NAME) FROM EMPLOYEE;
SELECT EMP_NAME,CONCAT("RS.",EMP_SALARY) FROM EMPLOYEE;
SELECT EMP_NAME,CONCAT("RS.",FORMAT(EMP_SALARY,3)) FROM EMPLOYEE;
SELECT EMP_NAME,LEFT(EMP_JOB_ROLE,9) FROM EMPLOYEE;

-- ORDER BY
SELECT * FROM EMPLOYEE ORDER BY EMP_NAME ASC;
SELECT * FROM EMPLOYEE ORDER BY EMP_NAME DESC;
SELECT * FROM EMPLOYEE ORDER BY EMP_NAME DESC,EMP_AGE;
SELECT * FROM EMPLOYEE ORDER BY ( CASE EMP_JOB_ROLE
WHEN "CEO" THEN 1
WHEN "DATA ANALYST" THEN 2
WHEN "CA" THEN 3
ELSE 1000 END);

-- DATE AND TIME
ALTER TABLE EMPLOYEE ADD COLUMN EMP_HIRE_DATE DATE;

UPDATE EMPLOYEE SET EMP_HIRE_DATE ="2022-12-18";
UPDATE EMPLOYEE SET EMP_HIRE_DATE ="2022-06-06" WHERE EMP_JOB_ROLE="CA";
SELECT NOW();
SELECT CURDATE();
SELECT DATE(NOW());
SELECT DATE_FORMAT(CURDATE(),"%D%M%Y");
SELECT DATEDIFF(CURDATE(),"2022-12-18");
SELECT CURDATE() 'start date';
SELECT DATE_ADD(CURDATE(),INTERVAL 1 DAY) 'one day later';
SELECT DATE_ADD(CURDATE(),INTERVAL 1 WEEK) 'one week later';
SELECT DATE_ADD(CURDATE(),INTERVAL 1 MONTH) 'one month later';
SELECT DATE_ADD(CURDATE(),INTERVAL 1 YEAR) one_year_later;

-- GROUP BY AND HAVING
SELECT EMP_JOB_ROLE,FORMAT(AVG(EMP_SALARY),0) EMP_SALARY_AGE  FROM EMPLOYEE GROUP BY EMP_JOB_ROLE;
SELECT EMP_JOB_ROLE,COUNT(EMP_ID) FROM EMPLOYEE GROUP BY EMP_JOB_ROLE;
SELECT EMP_JOB_ROLE,COUNT(EMP_ID) FROM EMPLOYEE GROUP BY EMP_JOB_ROLE HAVING COUNT(EMP_ID)>1 ORDER BY EMP_JOB_ROLE; 

-- CONSTRAINTS
CREATE TABLE EMPLOYEE1
(
	EMP_ID INT PRIMARY KEY AUTO_INCREMENT,
    EMP_NAME VARCHAR(20) NOT NULL,
    EMP_JOB_ROLE VARCHAR(20) DEFAULT "NOT GIVEN",
	EMP_SALARY BIGINT ,
    EMP_PAN_NUM VARCHAR(10) UNIQUE,
    CHECK (EMP_SALARY>100000)
);

INSERT INTO EMPLOYEE1(EMP_NAME,EMP_SALARY,EMP_PAN_NUM) VALUES("AKSHAY",200000,1234567);

-- INSERT INTO EMPLOYEE1 (EMP_NAME,EMP_SALARY,EMP_PAN_NUM) VALUES("PIRANAV",10000,1234567);-- ERROR DUE TO check table

SELECT * FROM EMPLOYEE1;

-- FOREIGN KEY 
DROP TABLE EMPLOYEE;

CREATE TABLE BRANCH
(
	BRANCH_ID INT PRIMARY KEY ,
    BRANCH_MANAGER VARCHAR(20) DEFAULT "NOT SPECIFIED",
    BRANCH_ADDRESS VARCHAR(30) DEFAULT "NOT GIVEN"
);
INSERT INTO BRANCH  VALUES(7,"AKSHAY","NEW DELHI");

DROP TABLE BRANCH;

CREATE TABLE EMPLOYEE
(
	EMP_ID INT PRIMARY KEY AUTO_INCREMENT,
    EMP_NAME VARCHAR(20) DEFAULT "NOT GIVEN",
    EMP_SALARY BIGINT,
    EMP_JOB_ROLE VARCHAR(20),
    BRANCH_ID INT ,
    CONSTRAINT FK_KEY FOREIGN KEY(BRANCH_ID) REFERENCES BRANCH(BRANCH_ID)
);

INSERT INTO EMPLOYEE  VALUES(1,"AKSHAY",444,"FO",7);

ALTER TABLE EMPLOYEE DROP FOREIGN KEY FK_KEY;
ALTER TABLE EMPLOYEE ADD  CONSTRAINT FK_KEY  FOREIGN KEY (BRANCH_ID) REFERENCES BRANCH(BRANCH_ID);




-- VIEW
-- CREATING A VIEW
CREATE VIEW AP AS
SELECT * FROM EMPLOYEE;

-- VIEW ALL FROM THE VIEW
SELECT * FROM AP;

-- DELETING A VIEW
DROP VIEW AP;

-- MODIFY VIEW
CREATE OR REPLACE VIEW AP AS
SELECT EMP_NAME FROM EMPLOYEE;

-- UNION
CREATE TABLE CLIENT 
(
	BRANCH_ID INT PRIMARY KEY ,
    BRANCH_MANAGER VARCHAR(20) DEFAULT "NOT SPECIFIED",
    BRANCH_ADDRESS VARCHAR(30) DEFAULT "NOT GIVEN"
);
INSERT INTO CLIENT VALUES(1,"PIRANAV","HYDERABAD"); 
INSERT INTO CLIENT VALUES(7,"AKSHAY","NEW DELHI"); 

SELECT * FROM BRANCH
UNION -- BUT NEVER UNION THE COMMON ELEMENT
SELECT * FROM CLIENT;

SELECT * FROM BRANCH
UNION  ALL--  UNION THE COMMON ELEMENT
SELECT * FROM CLIENT;


-- EXISTS IF YES THEN IT ACTS LIKE TRUE ELSE FALSE
SELECT EMP_NAME FROM EMPLOYEE -- HERE IT ACTS LIKE TRUE
WHERE EXISTS(SELECT * FROM EMPLOYEE WHERE EMP_NAME="AKSHAY");

SELECT EMP_NAME FROM EMPLOYEE -- HERE IT ACT LIKE FALSE
WHERE EXISTS(SELECT * FROM EMPLOYEE WHERE EMP_NAME="SRI");

-- ANY

-- ALL
SELECT * FROM BRANCH WHERE
BRANCH_ID<>ALL(SELECT BRANCH_ID FROM EMPLOYEE WHERE EMP_SALARY>100);

-- JOIN(INNER,LEFT,RIGHT,CROSS)FULL JOIN NOT AVAILABLE IN SQL
CREATE TABLE BRANCH
(
	BRANCH_ID INT PRIMARY KEY ,
    BRANCH_MANAGER VARCHAR(20) DEFAULT "NOT SPECIFIED",
    BRANCH_ADDRESS VARCHAR(30) DEFAULT "NOT GIVEN"
);

CREATE TABLE EMPLOYEE
(
	EMP_ID INT PRIMARY KEY AUTO_INCREMENT,
    EMP_NAME VARCHAR(20) DEFAULT "NOT GIVEN",
    EMP_SALARY BIGINT,
    EMP_JOB_ROLE VARCHAR(20),
    BRANCH_ID INT ,
    CONSTRAINT FK_KEY FOREIGN KEY(BRANCH_ID) REFERENCES BRANCH(BRANCH_ID)
);
INSERT INTO BRANCH(BRANCH_ID,BRANCH_MANAGER) VALUES(5,"SIVA");
INSERT INTO EMPLOYEE(EMP_ID,EMP_NAME,EMP_SALARY,EMP_JOB_ROLE)
VALUES(12,"LATHA",50000,"TEACHER");
SELECT * FROM  EMPLOYEE;
SELECT * FROM  BRANCH;

-- INNER JOIN ONLY MATCHING ROWS
SELECT EMPLOYEE.EMP_NAME,EMPLOYEE.EMP_ID,EMPLOYEE.EMP_JOB_ROLE,BRANCH.BRANCH_ADDRESS FROM EMPLOYEE
INNER JOIN BRANCH
ON EMPLOYEE.BRANCH_ID=BRANCH.BRANCH_ID
ORDER BY EMPLOYEE.EMP_ID DESC;

-- LEFT JOIN INCLUDE THE UNMATCHED LEFT TABLE VALUES TOO
SELECT EMPLOYEE.EMP_NAME,EMPLOYEE.EMP_ID,EMPLOYEE.EMP_JOB_ROLE,BRANCH.BRANCH_ADDRESS FROM EMPLOYEE
LEFT JOIN BRANCH
ON EMPLOYEE.BRANCH_ID=BRANCH.BRANCH_ID
ORDER BY EMPLOYEE.EMP_ID DESC;

-- RIGHT JOIN INCLUDE THE UNMATCHED RIGHT TABLE VALUES TOO
SELECT EMPLOYEE.EMP_NAME,EMPLOYEE.EMP_ID,EMPLOYEE.EMP_JOB_ROLE,BRANCH.BRANCH_ADDRESS FROM EMPLOYEE
RIGHT JOIN BRANCH
ON EMPLOYEE.BRANCH_ID=BRANCH.BRANCH_ID
ORDER BY EMPLOYEE.EMP_ID DESC;

-- CROSS JOIN CROSSLY JOIN ALL TO ALL MENTIONED.
SELECT EMPLOYEE.EMP_NAME,EMPLOYEE.EMP_ID,EMPLOYEE.EMP_JOB_ROLE,BRANCH.BRANCH_ADDRESS FROM EMPLOYEE
CROSS JOIN BRANCH
ORDER BY EMPLOYEE.EMP_ID DESC;

-- ----------------------------------------------------------------------------------------------------------

--                            INTERMEDTIATE
/* 1)STORED PROCEDURE
   2)FUNCTIONS
   3) CURSOR
*/

-- PROCEDURE WITHOUT PARAMETER
DELIMITER $$

CREATE PROCEDURE AKSHAY()
BEGIN 
SELECT * FROM BRANCH;
END$$

DELIMITER ;

CALL AKSHAY();

-- DROPING THE PROCEDURE 
DROP PROCEDURE AKSHAY;

DELIMITER $$

CREATE PROCEDURE EMP_COUNT()
BEGIN 
	DECLARE TOTAL INT DEFAULT 0;
    SELECT COUNT(EMP_ID) INTO TOTAL FROM EMPLOYEE;
    SELECT TOTAL;
END $$

DELIMITER ;

CALL EMP_COUNT();
SELECT COUNT(EMP_ID) TOTAL FROM EMPLOYEE;

-- PROCEDURE WITH PARAMETER(IN,OUT,INOUT)
-- IN
DELIMITER $$
CREATE PROCEDURE JOB_ROLE(IN J_ROLE VARCHAR(20),OUT TOTAL INT/* ANY NAME*/)
BEGIN
    SELECT COUNT(EMP_ID) TOT INTO TOTAL FROM EMPLOYEE
    WHERE EMP_JOB_ROLE=J_ROLE;
END$$
DELIMITER ;
DROP PROCEDURE JOB_ROLE;
SET @total =10;
CALL JOB_ROLE("ML",@total);-- @total is a session variable
SELECT @total;

DELIMITER ##
CREATE PROCEDURE INC(INOUT COUNTER INT,IN INC INT)
BEGIN 
	SET COUNTER = COUNTER + INC;
END##
DELIMITER ;
SET @COUNTER=10;
CALL INC(@COUNTER,3);
SELECT @COUNTER TOTAL;
CALL INC(@COUNTER,5);
SELECT @COUNTER TOTAL;

DELIMITER $$
CREATE PROCEDURE SUMMA(IN ID INT)
BEGIN 
	IF ID=1 THEN
    SELECT 'NEW DELHI';
    ELSEIF ID=2 THEN
    SELECT 'TENKASI';
    ELSE
    SELECT 'MUMBAI';
    END IF;
END $$
DELIMITER ;

CALL SUMMA(6);

DELIMITER $$
CREATE PROCEDURE SHOWING(IN ID INT)
BEGIN 
	CASE ID
		WHEN 3 THEN
        SELECT "TAMILNADU";
		WHEN 4 THEN
        SELECT "ANDHRA";
        ELSE
        SELECT "KARNATAKA";
	END CASE;
END$$
DELIMITER ;

CALL SHOWING(3);

-- LOOPS

DELIMITER ##
CREATE PROCEDURE LOOPDEMO()
BEGIN 
	DECLARE I INT;
    SET I=0;
    LOOPLABEL : LOOP
		IF I>10 THEN
			LEAVE LOOPLABEL;
		END IF;
        SELECT I;
        SET I=I+1;
	END LOOP;
END ##
DELIMITER ;

CALL LOOPDEMO();

DELIMITER $$

CREATE PROCEDURE LOOPCONCAT()
BEGIN
	DECLARE I INT;
    DECLARE STR VARCHAR(20);
    SET I=1;
    SET STR="";
    LOOPLABEL : LOOP
		IF I>10 THEN 
			LEAVE LOOPLABEL;
		END IF;
		SET STR=CONCAT(STR,I," ");
        SET I=I+1;
	END LOOP;
    SELECT STR;
END $$
DELIMITER ;

CALL LOOPCONCAT();


        










